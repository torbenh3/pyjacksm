#!/usr/bin/env python

import gtk
import dbus.service
import pyjacksm
import os

class builder_base( gtk.Builder ):
    def __init__( self, filename ):
	gtk.Builder.__init__( self )
	self.add_from_file( os.path.join( pyjacksm.__path__[0], "data", filename ))


class load_dialog( object ):
    def __init__( self, template=False ):
	bb = builder_base( "load_dialog.glade" )

	self.dialog    = bb.get_object( "dialog1" )
	self.treeview  = bb.get_object( "treeview1" )
	self.listmodel = bb.get_object( "liststore1" )
        self.template  = template

	bb.connect_signals( self, None )

	self.treeview.append_column( gtk.TreeViewColumn( "name", gtk.CellRendererText(), text=0 ) )

        if template:
            projects = sm_iface.list_templates()
        else:
            projects = sm_iface.list()

	projects.sort()

	for i in projects:
	    self.listmodel.append( [i] )


	self.dialog.show()
	    

    def ok_clicked( self, data ):
	sel = self.treeview.get_selection()
	(model, it) = sel.get_selected()
	if not it:
	    return

	value = model.get_value( it, 0 )

        if self.template:
            session = sm_iface.load_template( value )
        else:
            session = sm_iface.load( value )
	self.dialog.destroy()

        s_proxy = dbus.SessionBus().get_object( "org.jackaudio.sessionmanager", session )
        s_iface = dbus.Interface( s_proxy, "org.jackaudio.session" )
        d = loading_dialog( s_iface )

    def cancel_clicked( self, data ):
	self.dialog.destroy()

class loading_dialog( object ):
    def __init__( self, session ):
	bb = builder_base( "loading_dialog.glade" )
	self.dialog    = bb.get_object( "loading_dialog" )
        self.progress  = bb.get_object( "progressbar" )
        self.session   = session
        bb.connect_signals( self, None )
        self.session.connect_to_signal("progress_signal", self.progress_cb )
        self.session.connect_to_signal("finished_signal", self.finished_cb )
	self.dialog.set_keep_above(True)

        self.dialog.show()

        self.session.start_load()

    def abort_cb( self, data ):
        self.session.abort_load()
        self.dialog.destroy()

    def progress_cb( self, num, of ):
	if of != 0:
	    self.progress.set_fraction( float(num)/float(of) )
	else:
	    self.progress.set_fraction( 1.0 )

    def finished_cb( self ):
        self.dialog.destroy()


class main_win( object ):
    def __init__( self ):
	bb = builder_base( "main_win.glade" )
	self.window    = bb.get_object( "window" )
        self.treeview  = bb.get_object( "treeview" )
        self.textview  = bb.get_object( "textview" )
        self.treestore = gtk.TreeStore( str, str, str, object )
	self.treeview.set_model(self.treestore)
	self.textbuffer= bb.get_object( "textbuffer" )

	bb.connect_signals( self, None )

	self.treeview.append_column( gtk.TreeViewColumn( "name", gtk.CellRendererText(), text=0 ) )

        sessions_paths = sm_iface.get_sessions()
        sessions_iface = []
        for s in sessions_paths:
            s_proxy = dbus.SessionBus().get_object( "org.jackaudio.sessionmanager", s )
            s_iface = dbus.Interface( s_proxy, "org.jackaudio.session" )
            sessions_iface.append(s_iface)

	siter = self.treestore.append( None, ("logo", "logo", None, sessions_iface) )

        for s in sessions_iface:
            sname = s.name()
            siter = self.treestore.append( None, (sname, sname, None, s) )
            cls = s.get_clients()
            for c in cls:
                self.treestore.append( siter, (c, sname, c, s) )

	self.window.connect( "destroy", self.destroy_cb )
        self.window.show()

    def row_activated_cb(self, treeview, path, col):
	sess = self.treestore[path][3]
	clie = self.treestore[path][2]
	
	if clie != None:
	    cl_log = sess.get_client_log( clie )
	    self.textbuffer.set_text( cl_log )
	    self.textview.scroll_to_iter( self.textbuffer.get_end_iter(), 0 )

    def destroy_cb( self, w ):
	global main_w
	main_w = None

		


class over_dialog( object ):
    def __init__( self ):
	bb = builder_base( "overwrite_dialog.glade" )
	self.dialog    = bb.get_object( "overwrite_dialog" )

class save_dialog( object ):
    def __init__( self, template=False ):
	bb = builder_base( "save_dialog.glade" )

	self.dialog    = bb.get_object( "save_dialog" )
	self.treeview  = bb.get_object( "save_tree" )
	self.listmodel = bb.get_object( "liststore1" )
	self.entry     = bb.get_object( "name_entry" )
        self.template  = template

	bb.connect_signals( self, None )

	self.treeview.append_column( gtk.TreeViewColumn( "name", gtk.CellRendererText(), text=0 ) )

        
        if template:
            projects = sm_iface.list_templates()
        else:
            projects = sm_iface.list()
	projects.sort()

	for i in projects:
	    self.listmodel.append( [i] )


	self.dialog.show()

    def tree_sel( self, data ):
	sel = self.treeview.get_selection()
	(model, it) = sel.get_selected()
	if not it:
	    return

	value = model.get_value( it, 0 )
	self.entry.set_text( value )


    def ok_clicked( self, data ):
	sname = self.entry.get_text()

	if sm_iface.session_exists( sname ):
	    q = gtk.MessageDialog( type=gtk.MESSAGE_QUESTION, buttons=gtk.BUTTONS_YES_NO, message_format="Session already exists. Overwrite ?" )
	    r = q.run()
	    q.destroy()
	    if r == gtk.RESPONSE_YES:
		sm_iface.save_over( sname )
	else:
	    sm_iface.save_as( sname )

	self.dialog.destroy()

    def cancel_clicked( self, data ):
	self.dialog.destroy()


class popup_menu(object):
    def __init__( self, button, activate_time ):
	bb = builder_base( "session_popup.glade" )

	self.menu = bb.get_object( "popup_menu" )
	self.quit = bb.get_object( "quit_item" )
	self.save = bb.get_object( "save_item" )
	self.titleitem = bb.get_object( "titleitem" )

	current = sm_iface.current_session()

	if not current:
	    self.quit.set_sensitive( False )
	    self.save.set_sensitive( False )
	    self.titleitem.set_label( "No Current Session" )
	else:
	    self.titleitem.set_label( "Session: "+current )
	    

	bb.connect_signals( self, None )

	self.menu.popup ( None, None, gtk.status_icon_position_menu, button, activate_time, sicon )

    def save_cb( self, data ):
	if sm_iface.current_session():
	    sm_iface.save()
	else:
	    d = save_dialog()

    def save_as_cb( self, data ):
	d = save_dialog()

    def save_template_cb( self, data ):
        d = save_dialog( True )

    def load_cb( self, data ):
	d = load_dialog()

    def load_template_cb( self, data ):
	d = load_dialog( True )

    def quit_cb( self, data ):
	if sm_iface.current_session():
	    sm_iface.quit()


def icon_activate( icon ):
    global main_w
    if not main_w:
	main_w = main_win()

def icon_popup( icon, button, activate_time ):
    p = popup_menu( button, activate_time )



def get_sm_iface():
    session_bus = dbus.SessionBus()
    sm_proxy = session_bus.get_object( "org.jackaudio.sessionmanager", "/org/jackaudio/sessionmanager" )
    sm_iface = dbus.Interface( sm_proxy, "org.jackaudio.sessionmanager" )

    return sm_iface

from dbus.mainloop.glib import DBusGMainLoop
DBusGMainLoop(set_as_default=True)

main_w = None
sm_iface = get_sm_iface()

sicon = gtk.status_icon_new_from_file( os.path.join( pyjacksm.__path__[0], "data", "jack_sm_icon.png" ))

sicon.connect( "activate", icon_activate )
sicon.connect( "popup-menu", icon_popup )

gtk.main()
