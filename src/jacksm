#!/usr/bin/env python


from optparse import OptionParser
from pyjacksm.sessionmanager import SessionManager


try:
    import dbus.service
    import gobject
    have_dbus = True
except:
    have_dbus = False




if have_dbus:
    class DbusSM( dbus.service.Object ):
        def __init__( self, sm ):
            self.sm = sm
            dbus.service.Object.__init__( self, None, 
                    "/org/jackaudio/sessionmanager",
                    dbus.service.BusName( "org.jackaudio.sessionmanager", bus=dbus.SessionBus() ) )

        @dbus.service.method( dbus_interface="org.jackaudio.sessionmanager", in_signature="s", out_signature="i" )
        def save_as( self, name ):
	    self.sm.current_session = name
            return self.sm.save_session( name )

        @dbus.service.method( dbus_interface="org.jackaudio.sessionmanager", in_signature="s", out_signature="i" )
        def save_template( self, name ):
            return self.sm.save_template( name )

        @dbus.service.method( dbus_interface="org.jackaudio.sessionmanager", in_signature="s", out_signature="i" )
        def save_over( self, name ):
	    self.sm.move_session( name, "jacksm-tmp-save" )
	    self.sm.current_session = name
            return self.sm.save_session( name )

        @dbus.service.method( dbus_interface="org.jackaudio.sessionmanager", in_signature="", out_signature="i" )
        def save( self ):
	    if not self.sm.current_session:
		return -1

	    self.sm.move_session( self.sm.current_session, "jacksm-tmp-save" )
	    retval = self.sm.save_session( self.sm.current_session )
	    if retval:
		return retval

	    self.sm.rm_session( "jacksm-tmp-save" )
	    return retval

        @dbus.service.method( dbus_interface="org.jackaudio.sessionmanager", in_signature="", out_signature="i" )
        def quit( self ):
	    if not self.sm.current_session:
		return -1

	    self.sm.move_session( self.sm.current_session, "jacksm-tmp-save" )
	    retval = self.sm.quit_session( self.sm.current_session )
	    if retval:
		return retval

	    self.sm.current_session = None
	    self.sm.rm_session( "jacksm-tmp-save" )
	    return retval

        @dbus.service.method( dbus_interface="org.jackaudio.sessionmanager", in_signature="s", out_signature="i" )
        def quit_as( self, name ):
	    self.sm.current_session = None
            return self.sm.quit_session( name )

        @dbus.service.method( dbus_interface="org.jackaudio.sessionmanager", in_signature="s", out_signature="i" )
        def load( self, name ):
	    if not self.sm.current_session:
		self.sm.current_session = name
	    else:
		self.sm.current_session = None

            return self.sm.load_session( name )

        @dbus.service.method( dbus_interface="org.jackaudio.sessionmanager", in_signature="s", out_signature="i" )
        def load_template( self, name ):
            return self.sm.load_session( name, True )

        @dbus.service.method( dbus_interface="org.jackaudio.sessionmanager", in_signature="", out_signature="as" )
        def list( self ):
            return self.sm.list_projects()

        @dbus.service.method( dbus_interface="org.jackaudio.sessionmanager", in_signature="", out_signature="as" )
        def list_templates( self ):
            return self.sm.list_templates()

        @dbus.service.method( dbus_interface="org.jackaudio.sessionmanager", in_signature="", out_signature="s" )
        def current_session( self ):
            return self.sm.get_current_session()

        @dbus.service.method( dbus_interface="org.jackaudio.sessionmanager", in_signature="s", out_signature="b" )
        def session_exists( self, name ):
            return self.sm.session_exists( name )

        @dbus.service.method( dbus_interface="org.jackaudio.sessionmanager", in_signature="", out_signature="" )
        def daemon_quit( self ):
            loop.quit() 

oparser = OptionParser()
oparser.add_option( "--nodbus", action="store_false", dest="dbus", default=have_dbus,
                    help="Dont use DBUS to issue commands to a running instance" )
oparser.add_option( "--daemon", action="store_true", dest="daemon", default=False,
                    help="Start in daemon mode, and listen for dbus commands" )
oparser.add_option( "--save", action="store_true", dest="save", default=False,
                    help="Tell SessionManger to save." )
oparser.add_option( "--saveas", action="store", type="string", dest="saveas",
                    help="Save Session As <name>" )

oparser.add_option( "--quit", action="store_true", dest="quit", default=False,
                    help="Tell SessionManager to Save And Quit" )
oparser.add_option( "--current", action="store_true", dest="show_current", default=False,
                    help="show current session name" )

oparser.add_option( "--list", action="store_true", dest="list", default=False,
                    help="List Projects" )
oparser.add_option( "--quitdaemon", action="store_true", dest="quitdaemon", default=False,
                    help="Tell SessionManager Daemon to Exit" )
oparser.add_option( "--quitas", action="store", dest="quitas", type="string",
                    help="SaveAs And Quit" )
oparser.add_option( "--load", action="store", dest="load", type="string",
                    help="Load Session with <name>" )
oparser.add_option( "--renames", action="store_true", dest="renames", default=False,
                    help="Allow renaming offending clients" )

(opt,args) = oparser.parse_args()

if not opt.dbus:
    sm = SessionManager()
    if opt.saveas:
        sm.save_session( opt.saveas )

    if opt.load:
        sm.load_session( opt.load )

    if opt.quitas:
        sm.quit_session( opt.quitas ) 
else:
    if opt.daemon:
        sm = SessionManager()
        from dbus.mainloop.glib import DBusGMainLoop
        DBusGMainLoop(set_as_default=True)
        dbsm = DbusSM( sm )
        loop = gobject.MainLoop()
        loop.run()
    else:
        session_bus = dbus.SessionBus()
        sm_proxy = session_bus.get_object( "org.jackaudio.sessionmanager", "/org/jackaudio/sessionmanager" )
        sm_iface = dbus.Interface( sm_proxy, "org.jackaudio.sessionmanager" )
        if opt.saveas:
            sm_iface.save_as( opt.saveas )
	if opt.save:
	    curr = sm_iface.current_session()
	    if curr:
		sm_iface.save()
	    else:
		print "No current project"

	if opt.quit:
	    curr = sm_iface.current_session()
	    if curr:
		sm_iface.quit()
	    else:
		print "No current project"

        if opt.quitas:
            sm_iface.quit_as( opt.quitas )
        if opt.load:
            sm_iface.load( opt.load )
        if opt.list:
            projects = sm_iface.list()
            for i in projects:
                print i

	if opt.show_current:
	    curr = sm_iface.current_session()
	    if curr:
		print curr
	    else:
		print "No Session"

        if opt.quitdaemon:
            sm_iface.daemon_quit()





